[{"title":"sqli-labs安装","date":"2020-11-03T14:25:35.242Z","path":"SQL/sqli-labs使用/","text":"docker安装sqli-labs docker search sqli-labs root@ubuntu:~# docker search sqli-labsNAME DESCRIPTION STARS OFFICIAL AUTOMATEDacgpiano/sqli-labs sql injection labs 12c0ny1/sqli-labs sqli-labs是一个sql注入的练习靶机，项目地址为… 2 docker pull acgpiano/sqli-labs 查看镜像docker images root@ubuntu:~# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEacgpiano/sqli-labs latest 0976afc45249 4 years ago 434MB 运行sqli-labs docker run -dt --name sqli -p 8081:80 --rm acgpiano/sqli-labs 通过浏览器访问：localhost:8081，显示如下页面，表示安装完成啦","tags":[{"name":"sql","slug":"sql","permalink":"http://tsung1992.github.io/tags/sql/"}]},{"title":"IPv6基础","date":"2020-09-01T13:29:52.522Z","path":"network/IPv6基础/","text":"IPv6基础IPv6特点 128bits的地址方案，提供了巨大的IP地址空间 多等级层次有助于路由聚合，提高了因特网网络路由的效率及可扩展性 IPv6可提供远大于IPv4的网络前缀，同一组织机构在其网络中可以只使用一个前缀，这样ISP可以把所有客户聚合形成一个前缀并发布出去。分层聚合使全局路由表项数量很少，转发效率更高。 自动配置过程允许IPv6网络中的节点更加便捷的接入IPv6网络【实现了即插即用的联网方式】 重新编制机制使得IPv6提供商之间的转换对最终用户是透明的 不再有广播、不再有ARP，利用ICMPv6替代ARP IPv6的包头比IPv4更加有效率，数据字段更少，去掉了包头校验和。 IPv地址表示IPv6地址共128位，使用十六进制进行表示，分为8段，中间用”:”隔开。 如：2001:0000:3238:00E1:0063:0000:0000:FEFB IPv6地址简写以2001:0410:0000:0001:0000:0000:0000:45ff为例： 每段的前导0可以省略，但至少保留1个0 2001:410:0:1:0:0:0:45ff 连续多个0可以缩写为”::”，但只能使用一次 2001:410:0:1::45ff IPv6地址结构IPv6地址分为两部分：前缀及接口ID 接口标识生成方法： 手工配置 系统通过软件自动生成 IEEE EUI-64规范自动生成 将MAC地址转换为接口ID MAC地址的独特性保证了接口ID的独特性 设备自动生成，不需认为干预 如下：将MAC地址为00-E0-4C-68-10-18，通过EUI-64自动生成IPv6的接口ID。 步骤1：在MAC地址的高24位厂商ID和低24位厂商编号ID之间插入两个字节FFFE 步骤2：将U/L位取反，此处0置为1 U/L 位是第一个字节的第七位，用于确定该地址是全球管理还是本地管理。如果为0就为全球管理，表示全球唯一地址；为1就为本地管理，表示本地唯一地址，是网络管理员为了加强自己对网络管理而指定的地址 IPv6报头 字段 长度 含义 version 4bit 6：表示IPv6 traffic class 8bit 流量类型，该字段及其功能类似于IPv4业务类型字段。该字段以区分业务编码点（DSCP）标记一个IPv6数据包，以此指明数据包应当如何处理。 flow label 20bit 流标签。该字段用来表示IP数据包的一个流， payload length 16bit 该字段表示有效载荷的长度、有效载荷是指紧跟在IPv6基本报头的数据包，包含IPv6扩展报头 next header 8bit 下一报头，该字段指明了跟随在IPv6基本报头后的扩展报头的信息类型 Hop limit 8bit 跳数限制，该字段定义了IPv6数据包所能经过的最大跳数，这个字段和IPv4中的TTL字段非常相似。 Source address 128bit 该字段表示该报文的原地址 Destination address 128bit 该字段表示该报文的目的地址 extension headers 可变 扩展报头。IPv6取消了IPv4报头中的选项字段，并引入了多种扩展报文头，在提高处理效率的同时还增强了IPv6的灵活性，为IP协议提供了良好的扩展能力。当超过一种扩展报头被用在同一个分组里时，报头必须按照下列顺序出现：- IPv6基本报头- 逐跳选项扩展报头- 目的选项扩展报头- 路由扩展报头- 分片扩展报头- 授权扩展报头- 封装安全有效载荷扩展报头- 目的选项扩展报头(指那些将被分组报文的最终目的地处理的选项)- 上层扩展报头不是所有的扩展报头都需要被转发路由设备查看和处理的。路由设备转发时根据基本报头中Next Header值来决定是否要处理扩展头。除了目的选项扩展报头出现两次（一次在路由扩展报头之前，另一次在上层扩展报头之前），其余扩展报头只出现一次。 一个IPv6数据包可能包括0个或多个扩展包头，当使用多个扩展包头时，通过前面的包头的Next head字段指明该扩展包头后的扩展包头。有了扩展包头，中间路由器就不需要处理每一个可能出现的选项，提高了路由器处理数据包的速度，提高了其转发性能。在扩展报头链的最后就是有效负载。 扩展报头是可选的，只有需要该扩展报头对应的功能，发送主机才会添加相应扩展报头 与IPv4报头相比，IPv6报头结构的提升： 基本的IPv4报头长度为20个字节，基本的IPv6报头长度为40个字节； 由于2层与4层的校验已经足够健壮，取消了IP的三层校验； 取消中间节点的分片功能，分片重组功能由源端实现，通过Path MTU机制来发现路径MTU。即，源节点在正式发送数据之前，使用ICMPv6来检测路径上最小的MTU； 增加流标签，提高QoS效率。","tags":[]},{"title":"docker 镜像基本操作","date":"2020-08-20T14:35:17.317Z","path":"docker/docker镜像基本操作/","text":"镜像是Docker的三大核心概念中最为重要的。Docker运行容器前需要本地存在对应的镜像，若没有镜像存在与本地，会先从仓库从获取下载。 获取镜像docker官方提供数十万个镜像供大家下载，包括且不限于常用的ubuntu、apache、nginx、mysql、mongodb等常用的服务器及数据库等。 可使用docker pull命令从镜像源下载镜像。 docker pull：获取镜像 # 下载镜像 docker pull 镜像名[:tag]root@ubuntu:~# docker pull ubuntuUsing default tag: latestlatest: Pulling from library/ubuntu3ff22d22a855: Pull complete e7cb79d19722: Pull complete 323d0d660b6a: Pull complete b7f616834fd0: Pull complete Digest: sha256:5d1d5407f353843ecf8b16524bc5565aa332e9e6a1297c73a92d3e754b8a636dStatus: Downloaded newer image for ubuntu:latestdocker.io/library/ubuntu:latest# 通过下载过程，可以看到，一个镜像一般是由多个层（layer） 组成，类似 f7e2b70d04ae这样的串表示层的唯一 ID。# PS: 实际上完整的 ID 包括了 256 个 bit, 64 个十六进制字符组成的。 docker images 查看所有本地的主机上的镜像 docker images #列出本地的镜像# 解释REPOSITORY 镜像的仓库源TAG 镜像的标签IMAGE ID 镜像的idCREATED 创建的时间SIZE 镜像的大小# 可选项 -a --all 显示所有镜像，包括中间层 -q --quiet 仅显示镜像ID docker search 搜索镜像 root@ubuntu:~# docker search mysqlNAME DESCRIPTION STARS OFFICIAL AUTOMATEDmysql MySQL is a widely used, open-source relati... 9520 [OK] mariadb MariaDB is a community-developed fork of M... 3456 [OK] # 可选项 --filter=STARS=3000 搜索starts&gt;3000的镜像root@a5-vm04:~# docker search mysql --filter=STARS=5000NAME DESCRIPTION STARS OFFICIAL AUTOMATEDmysql MySQL is a widely used, open-source relati... 9520 [OK] docker rmi 删除镜像 docker rmi ID 删除指定的镜像docker rmi -f $(docker images -aq) 删除全部的镜像 查看镜像使用inspect命令查看镜像详细信息 通过docker inspect命令，可以获取镜像的详细信息，其中包括创建者、各层的数字摘要等。 root@ubuntu:~# docker inspect ubuntu[ &#123; \"Id\": \"sha256:1e4467b07108685c38297025797890f0492c4ec509212e2e4b4822d367fe6bc8\", \"RepoTags\": [ \"ubuntu:latest\" ], \"RepoDigests\": [ \"ubuntu@sha256:5d1d5407f353843ecf8b16524bc5565aa332e9e6a1297c73a92d3e754b8a636d\" ], \"Parent\": \"\", \"Comment\": \"\", \"Created\": \"2020-07-24T14:38:35.464294608Z\", \"Container\": \"9d62e8d762827123636cb28eacfed9975890fd659cac66adee63fc3a969bb8a9\", \"ContainerConfig\": &#123; \"Hostname\": \"9d62e8d76282\", \"Domainname\": \"\", \"User\": \"\", \"AttachStdin\": false, \"AttachStdout\": false, \"AttachStderr\": false, \"Tty\": false, \"OpenStdin\": false, \"StdinOnce\": false, \"Env\": [ \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" ], \"Cmd\": [ \"/bin/sh\", \"-c\", \"#(nop) \", \"CMD [\\\"/bin/bash\\\"]\" ], \"ArgsEscaped\": true, \"Image\": \"sha256:905a090e9b85447aff61cda51518fc1ab45af28e185981b70bc73dc9c03abf13\", \"Volumes\": null, \"WorkingDir\": \"\", \"Entrypoint\": null, \"OnBuild\": null, \"Labels\": &#123;&#125; &#125;, \"DockerVersion\": \"18.09.7\", \"Author\": \"\", \"Config\": &#123; \"Hostname\": \"\", \"Domainname\": \"\", \"User\": \"\", \"AttachStdin\": false, \"AttachStdout\": false, \"AttachStderr\": false, \"Tty\": false, \"OpenStdin\": false, \"StdinOnce\": false, \"Env\": [ \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" ], \"Cmd\": [ \"/bin/bash\" ], \"ArgsEscaped\": true, \"Image\": \"sha256:905a090e9b85447aff61cda51518fc1ab45af28e185981b70bc73dc9c03abf13\", \"Volumes\": null, \"WorkingDir\": \"\", \"Entrypoint\": null, \"OnBuild\": null, \"Labels\": null &#125;, \"Architecture\": \"amd64\", \"Os\": \"linux\", \"Size\": 73859057, \"VirtualSize\": 73859057, \"GraphDriver\": &#123; \"Data\": &#123; \"LowerDir\": \"/var/lib/docker/overlay2/0d948d7943f1db41d38707ae39e87bcf6dc842dbeb77c3b3ba332e366d38c02e/diff:/var/lib/docker/overlay2/b2160599c8339e155b44534f956ae2d1dab00cdf9e8cbbb1f013d5581f0771b8/diff:/var/lib/docker/overlay2/e64630287d462a45307b48add39bd3959d3c7e7c6b3404dd4c41e241d5d90b65/diff\", \"MergedDir\": \"/var/lib/docker/overlay2/d4e7ee51914e5a7b57f24cdff4882a9810c628d4fa3db1f806c2c5b259188085/merged\", \"UpperDir\": \"/var/lib/docker/overlay2/d4e7ee51914e5a7b57f24cdff4882a9810c628d4fa3db1f806c2c5b259188085/diff\", \"WorkDir\": \"/var/lib/docker/overlay2/d4e7ee51914e5a7b57f24cdff4882a9810c628d4fa3db1f806c2c5b259188085/work\" &#125;, \"Name\": \"overlay2\" &#125;, \"RootFS\": &#123; \"Type\": \"layers\", \"Layers\": [ \"sha256:ce30112909569cead47eac188789d0cf95924b166405aa4b71fb500d6e4ae08d\", \"sha256:8eeb4a14bcb4379021c215017c94800a848a8203a8ce76aa1bd211d4c995f792\", \"sha256:a37e74863e723df4ddd599ef1b7d9a68e2301794a8c37c2370f8c2c8993ef72c\", \"sha256:095624243293a7dfdb582f8471d6e2d9d7772dd621bc57906b034c59f388ebac\" ] &#125;, \"Metadata\": &#123; \"LastTagTime\": \"0001-01-01T00:00:00Z\" &#125; &#125;] 使用history命令查看镜像历史 通过docker history命令，可以列出各个层(layer)的创建信息。 root@ubuntu:~# docker history ubuntuIMAGE CREATED CREATED BY SIZE COMMENT1e4467b07108 3 weeks ago /bin/sh -c #(nop) CMD [\"/bin/bash\"] 0B &lt;missing&gt; 3 weeks ago /bin/sh -c mkdir -p /run/systemd &amp;&amp; echo 'do… 7B &lt;missing&gt; 3 weeks ago /bin/sh -c set -xe &amp;&amp; echo '#!/bin/sh' &gt; /… 811B &lt;missing&gt; 3 weeks ago /bin/sh -c [ -z \"$(apt-get indextargets)\" ] 1.01MB &lt;missing&gt; 3 weeks ago /bin/sh -c #(nop) ADD file:65a1cc50a9867c153… 72.9MB","tags":[{"name":"docker","slug":"docker","permalink":"http://tsung1992.github.io/tags/docker/"},{"name":"容器","slug":"容器","permalink":"http://tsung1992.github.io/tags/容器/"}]},{"title":"Content-type属性","date":"2020-08-17T14:16:39.599Z","path":"http/Content-Type/","text":"什么是content-typeContent-type首部字段说明了实体主体的MIME类型。 content-type(MediaType)，即Internet Media Type，互联网媒体类型，也称为MIME类型。在互联网中有成百上千中不同的数据类型，HTTP在传输数据对象时会为他们打上称为MIME的数据格式标签，用于区分数据类型。 Content-Type是HTTP的实体首部字段，用来表示请求或响应中的媒体类型。它用来告诉服务端如何处理请求的数据，以及告诉客户端（一般是浏览器）如何解析响应的数据，比如显示图片，解析并展示html等等 Conten-type格式Content-type：type/subtype；parameter - type：主类型，任意的字符串，人text，如果是*号代表所有 - subtype：子类型，任意的字符串，如html，如果是*号代表所有，用“/”与主类型隔开 - parameter：可选参数，如charset，boundary等 例如： Content-type: text/html Content-type: application/json; charset:utf-8 常见的Content-type类型以text开头的媒体格式类型text/html:HTML格式text/plain：纯文本格式test/xml：XML格式 (什么是XML？指可扩展标记语言（eXtensible Markup Language），被设计用来传输和存储数据 以image开头的媒体格式类型image/gif：gif图片格式image/jpeg：jpg图片格式image/png：png图片类型 以application开头的媒体格式类型application/xhtml+xml: XHTML格式application/xml：XML数据格式application/atom+xml：Atom XML聚合格式application/json：JSON数据格式application/pdf：pdf格式application/octet-stream：二进制流数据(如常见的文件下载)application/x-www-form-urlencoded：&lt;form encType=””&gt;中默认的encType，form表单数据被编码为key/value格式发送到服务器（表单默认的提交数据的格式）。另外还有一种常见的媒体格式是上传文件之时使用的：multipart/form-data ： 需要在表单中进行文件上传时，就需要使用该格式。 常见类型application/x-www-form-urlencoded(1) 浏览器的原生form表单 (2) 提交的数据按照key1=val1&amp;key2=val2的方式进行编码，key和val都进行URL转码 POST /dvwa/login.php HTTP1.1Upgrade-Insecure-Requests: 1Origin: http://10.160.15.105Content-Type: application/x-www-form-urlencodedUser-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.106 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Login=Login&amp;password=admin&amp;username=admin multipart/form-data常见的post数据提交的方式，使用表单上传文件时，必须让form的enctype等于该值。 enctype属性:enctype：规定了form表单在发送到服务器时候编码方式，它有如下的三个值。 application/x-www-form-urlencoded：默认的编码方式。但是在用文本的传输和MP3等大型文件的时候，使用这种编码就显得效率低下。 multipart/form-data：指定传输数据为二进制类型，比如图片、mp3、文件。 text/plain：纯文体的传输。空格转换为 “+” 加号，但不对特殊字符编码。 &lt;form enctype=\"multipart/form-data\" action=\"#\" method=\"POST\" /&gt; &lt;input type=\"hidden\" name=\"MAX_FILE_SIZE\" value=\"100000\" /&gt; Choose an image to upload: &lt;br/&gt; &lt;input name=\"uploaded\" type=\"file\" /&gt;&lt;br /&gt; &lt;br/&gt; &lt;input type=\"submit\" name=\"Upload\" value=\"Upload\" /&gt;&lt;/form&gt; 请求头示例：（以下为上传xml文件） POST /dvwa/vulnerabilities/upload/ HTTP/1.1Host: 1.1.1.1Connection: keep-aliveContent-Length: 1311Cache-Control: max-age=0Origin: http://1.1.1.1Upgrade-Insecure-Requests: 1DNT: 1Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryhrzKECyteqHqat1eUser-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Referer: http://1.1.1.1/dvwa/vulnerabilities/upload/Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9Cookie: security=low;acopendivids=swingset,jotto,phpbb2,redmine; acgroupswithpersist=nada; PHPSESSID=ij584g37d4f14n6gv872mth7b0; x-s3-sid=&gt;rn`yh6vsgm0dhtp/R1e3v30y; x-s3-rtk=Tr20uent76gJdi1hwE6szylhW524o49eUR4439; x-s3-tid=9c3321c9b97c96f78e8bda2351ef7f34c7250918:ylhW52_Pe3B:190a1755-e092-11ea-8767-5d01a268a33a:ae97f50468------WebKitFormBoundaryhrzKECyteqHqat1eContent-Disposition: form-data; name=\"MAX_FILE_SIZE\"100000------WebKitFormBoundaryhrzKECyteqHqat1eContent-Disposition: form-data; name=\"uploaded\"; filename=\"test.xml\"Content-Type: text/xml&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;XMLReport name=\"test\" xml_export_version=\"1.0\"&gt; &lt;summary&gt; &lt;url&gt;http://www.baidu.com/&lt;/url&gt; &lt;server_type&gt;None&lt;/server_type&gt; &lt;scan_mode&gt;0&lt;/scan_mode&gt; &lt;profile_name&gt;...........................&lt;/profile_name&gt; &lt;time&gt; &lt;scan_begin&gt;2019/04/10 01:39:52&lt;/scan_begin&gt; &lt;scan_end&gt;2019/04/10 01:40:23&lt;/scan_end&gt; &lt;scan_duration&gt;31s&lt;/scan_duration&gt; &lt;/time&gt; &lt;total_urls/&gt; &lt;total_vulns&gt; &lt;total_serious_vulns&gt;0&lt;/total_serious_vulns&gt; &lt;total_high_vulns&gt;0&lt;/total_high_vulns&gt; &lt;total_medium_vulns&gt;0&lt;/total_medium_vulns&gt; &lt;total_low_vulns&gt;0&lt;/total_low_vulns&gt; &lt;/total_vulns&gt; &lt;/summary&gt; &lt;vuln_items/&gt; &lt;server_information&gt; &lt;host&gt;http://www.baidu.com/&lt;/host&gt; &lt;server_type/&gt; &lt;total_urls num=\"0\"/&gt; &lt;external_urls num=\"0\"/&gt; &lt;/server_information&gt;&lt;/XMLReport&gt;------WebKitFormBoundaryhrzKECyteqHqat1eContent-Disposition: form-data; name=\"Upload\"Upload------WebKitFormBoundaryhrzKECyteqHqat1e-- 首先生成了一个 boundary 用于分割不同的字段，为了避免与正文内容重复，boundary 很长很复杂。然后 Content-Type 里指明了数据是以 multipart/form-data 来编码，本次请求的 boundary 是什么内容。 消息主体里按照字段个数又分为多个结构类似的部分，每部分都是以 –boundary 开始，紧接着是内容描述信息，然后是回车，最后是字段具体内容（文本或二进制）。 如果传输的是文件，还要包含文件名和文件类型信息。消息主体最后以 –boundary– 标示结束。 application/x-www-form-urlencoded： 窗体数据被编码为名称/值对。这是标准的编码格式。 multipart/form-data： 窗体数据被编码为一条消息，页上的每个控件对应消息中的一个部分。 text/plain： 窗体数据以纯文本形式进行编码，其中不含任何控件或格式字符。 form 的enctype属性为编码方式，常用有两种： application/x-www-form-urlencoded和multipart/form- data，默认为application/x-www-form-urlencoded。 当action为get时候，浏览器用x-www-form-urlencoded的编码方式把form数据转换成一个字串（name1=value1&amp; amp;name2=value2…），然后把这个字串append到url后面，用?分割，加载这个新的url。 当action为post时候，浏览器把form数据封装到http body中，然后发送到server。 如果没有type=file的控件，用默认的application/x-www-form-urlencoded就可以了。 但是如果有type=file的话，就要用到multipart/form-data了。浏览器会把整个表单以控件为单位分割，并为每个部分加上 Content-Disposition(form-data或者file),Content-Type(默认为text/plain),name(控件 name)等信息，并加上分割符(boundary)。 application/json消息主体是序列化后的JSON字符串 POST / HTTP/1.1 Content-Type: application/json;charset=utf-8 &#123;\"title\":\"test\",\"sub\":[1,2,3]&#125; text/xml一种使用http作为传输协议，XML作为编码方式的远程调用规范 POST [http://www.example.com](http://www.example.com) HTTP/1.1 Content-Type: text/xml &lt;!--?xml version=\"1.0\"?--&gt; &lt;methodcall&gt; &lt;methodname&gt;examples.getStateName&lt;/methodname&gt; &lt;params&gt; &lt;param&gt; &lt;value&gt;&lt;i4&gt;41&lt;/i4&gt;&lt;/value&gt; &lt;/param&gt; &lt;/params&gt; &lt;/methodcall&gt;","tags":[{"name":"http","slug":"http","permalink":"http://tsung1992.github.io/tags/http/"}]},{"title":"docker镜像","date":"2020-08-15T15:20:21.648Z","path":"docker/docker镜像/","text":"什么是镜像 镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境的开发软件，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。 联合文件系统(unionFS)联合文件系统是一种分层、轻量级并且高性能的文件系统。它支持对文件文件系统的修改作为一次提交来层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下。 联合文件系统是Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像，可以制作各种具体的应用镜像 Docker镜像原理什么是docker镜像一个完整的docker镜像可以支撑一个docker容器的运行，在docker容器运行过程中主要提供文件系统视角。 插话(理解Linux内核和ubuntu镜像的区别)： 传统虚拟机安装ubuntu包含两部分： 某个Linux内核的发行版本，比如Linux3.8版本的内核 某个特定的Ubuntu发行版，这部分内容不包含Linux内核，但包含Linux之外的软件管理方式、软件驱动。 Docker镜像原理Linux系统 Linux系统一般有内核、shell、文件系统和应用程序共4部分组成。 Linux文件系统由bootfs和roorfs两部分组成 bootfs(boot file system)：包含boot loader(引导加载程序)和kernel(内核)。用户不会修改这个文件系统。实际上，在启动(boot)过程完成后，整个内容都会被加载进内存，此时bootfs会被卸载掉从而释放出所占用的内存。同时也可以看出，对于同样内核版本的不同Linux发行版的bootfs都是一致的 rootfs(root file system)：包含典型的目录结构，包括/dev，/proc，/bin，/etc，/lib，/usr及/tmp等再加上要运行用户应用所需要的所有配置文件，二进制文件和库文件。这个文件系统在不同的Linux发行版中是不同的。而且用户可以对这个文件进行修改。 docker镜像docker镜像实际上由一层一层的文件系统组成（层叠的只读文件系统） 联合加载(union mount) Docker镜像是由特殊的文件系统叠加而成 最底端是 bootfs，并使用宿主机的bootfs(引导文件系统) 第二层是 root文件系统rootfs，称为base image（基础镜像） 然后再往上可以叠加其他的镜像文件 统一文件系统（Union File System）技术能够将不同的层整合成一个文件系统，为这些层提供了一个统一的视角，这样就隐藏了多层的存在，在用户的角度看来，只存在一个文件系统。 一个镜像可以放在另一个镜像的上面。位于下面的镜像称为父镜像，最底部的镜像成为基础镜像。 当从一个镜像启动容器时，Docker会在最顶层加载一个读写文件系统作为容器 根据镜像原理解决了下面的问题 Docker 镜像本质是什么？ 是一个分层文件系统 Docker 中一个centos镜像为什么只有200MB，而一个centos操作系统的iso文件要几个个G？ Centos的iso镜像文件包含bootfs和rootfs，而docker的centos镜像复用操作系统的bootfs，只有rootfs和其他镜像层 Docker 中一个tomcat镜像为什么有500MB，而一个tomcat安装包只有70多MB？ 由于docker中镜像是分层的，tomcat虽然只有70多MB，但他需要依赖于父镜像和基础镜像，所有整个对外暴露的tomcat镜像大小500多MB docker镜像为什么采用这种分层的结构 最大的好处是 ——共享资源 当有多个镜像都从相同的base镜像构建而来时，宿主机只需要在磁盘上保存一份base镜像，同时内存也需要加载一份base镜像，就可以为所有服务器服务了。而且镜像的每一层都可以被共享。 docker镜像内容docker镜像的内容主要包含两部分： 镜像层文件内容 镜像json文件 容器是一个动态的环境，每一层镜像中的文件属于静态内容，然而dockerfile中的ENV、VOLUME、CMD等内容最终都需要落实到容器的运行环境中，而这些内容均不可能直接坐落到每一层镜像所包含的文件系统内容中，此时每个docker镜像还会包含json文件记录与容器之间的关系","tags":[{"name":"docker","slug":"docker","permalink":"http://tsung1992.github.io/tags/docker/"},{"name":"容器","slug":"容器","permalink":"http://tsung1992.github.io/tags/容器/"}]},{"title":"初识docker","date":"2020-08-15T10:40:28.094Z","path":"docker/初识docker/","text":"docker 历史什么是dockerDocker是基于Go语言实现的开源容器项目，诞生于2013年初，最初的发起者是dotCloud公司。 Docker是个划时代的开源项目，它彻底释放了计算虚拟化的威力，极大提高了应用的维护效率，降低了云计算应用开发的成本。 Docker的构想是要实现“Build，Ship and Run Any App， Anywhere”，即通过对应用的封装(Packaging)、分发(Distribution)、部署(Deployment)、运行(Runtime)生命周期进行管理，达到应用组件“一次封装、到处运行”的目的。 为什么使用docker Docker容器化的好处 通过容器来打包应用、解耦应用和运行平台。 Docker在开发和运维中的优势 (1) 更快速的交付和部署 (2) 更高效的资源利用 ​ 运行docker容器不需要额外的虚拟化管理程序的支持，docker是内核级的虚拟化，可以实现更高的性能， 同时对资源的额外需求较低 (3) 更轻松的迁移和扩展 (4) 更简单的更新管理 ​ 使用dockerfile，只需要小小的配置修改，就可以替代以往大量的更新工作 Docker与虚拟化虚拟化技术一般指的是计算机虚拟化，或通常说的服务器虚拟化。 维基百科如是说： 在计算机技术中，虚拟化是一种资源管理技术，是将计算机的各种实体资源，如服务器、网络、内存及存储等，予以抽象、转换后呈现出来，打破实体结构间的不可切割的障碍，使用户可以用比原本的组态更好的方式来应用这些资源。 虚拟化的核心是对资源的抽象。 虚拟化技术科分为基于硬件的虚拟化和基于软件的虚拟化。 基于软件的虚拟化可分为应用虚拟化和平台虚拟化。 平台虚拟化： 完全虚拟化：虚拟机模拟完整的底层硬件环境和特权指令的执行过程，客户操作系统无须进行修改 硬件辅助虚拟化：利用硬件(主要是CPU)辅助支持处理敏感指令来实现完全虚拟化的功能，客户操作系统无须修改 部分虚拟化：只针对部分硬件资源进行虚拟化，客户操作系统需要进行修改 超虚拟化：部分硬件接口以软件的形式提供给客户机操作系统，客户操作系统需要进行修改 操作系统级虚拟化：内核通过创建多个虚拟的操作系统实例(内核和库)来隔离不同的进程。(容器相关技术即在这个范畴) docker为什么比VM快 docker有着比虚拟机更少的抽象层，由于Docker不需要Hypervisor实现硬件资源虚拟化，运行在Docker容器上的程序直接使用的都是实际物理机的硬件资源，因此在Cpu、内存利用率上Docker将会在效率上有明显优势 docker利用宿主机的内核，VM需要是Guest OS Docker的思想 集装箱 会将所有需要的内容放到不同的集装箱中，所需要的环境直接用这个集装箱就可以了 标准化 (1) 运输的标准化：统一的仓库 (2) 命令的标准化：docker提供了一系列的命令，帮助我们操作容器 (3) 提供了REST的API：衍生出了很多的图形化界面 隔离性 docker在运行容器时，会在Linux的内核中，单独开辟空间，该空间不影响其他进程 Docker的基本组成Docker本身是一个容器运行载体或称之为管理引擎。 docker三要素：容器，镜像，仓库 镜像：用于创建Docker容器的模板，一个镜像可以创建多个容器 容器：独立运行的一个或一组应用，是镜像运行的实体 仓库：集中存放镜像的地方，分为共有仓库和私有仓库 最大的公开仓库：https://hub.docker.com docker的架构图： 概念 说明 Docker 镜像(Images) Docker 镜像是用于创建 Docker 容器的模板，比如 Ubuntu 系统。 Docker 容器(Container) 容器是独立运行的一个或一组应用，是镜像运行时的实体。 Docker 客户端(Client) Docker 客户端通过命令行或者其他工具使用 Docker SDK (https://docs.docker.com/develop/sdk/) 与 Docker 的守护进程通信。 Docker 主机(Host) 一个物理或者虚拟的机器用于执行 Docker 守护进程和容器。 Docker Registry Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。Docker Hub(https://hub.docker.com) 提供了庞大的镜像集合供使用。一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 &lt;仓库名&gt;:&lt;标签&gt; 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签。 Docker Machine Docker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。 Docker的使用场景 使用Docker容器开发、测试、部署服务 创建隔离的运行环境 搭建测试环境 构建多用户的平台即服务基础设施 提供软件即服务应用程序 高性能、超大规模的宿主机部署","tags":[{"name":"docker","slug":"docker","permalink":"http://tsung1992.github.io/tags/docker/"},{"name":"容器","slug":"容器","permalink":"http://tsung1992.github.io/tags/容器/"}]},{"title":"物理层及数据链路层","date":"2020-08-13T12:45:45.631Z","path":"network/物理层&链路层/","text":"物理层物理层的功能不需要地址 Frame 13： 74 bytes on wire (592 bits),74 bytes captured (592 bits) 13号帧，线路74字节，实际捕获74字节 Encapsulation type： Ethernet(1) # 封装类型Arrival Time: # 捕获日期和时间Epoch Time：# 时间戳，另一种时间表示方式[Time delta from previous captured frame: ] #此包与前一包的时间间隔[Time since reference or first frame: ] #此包与第一帧的时间间隔Frame Number: # 帧序号Frame Length: # 帧长度Capture Length： # 捕获长度 （通常情况下帧长度和捕获长度是相同的）Protocols in frame：帧内封装的协议层次结构 EtherType 是以太帧里的一个字段，用来指明应用于帧数据字段的协议 链路层主要目的： 1. 为IP模块发送和接收IP数据报2. 为ARP模块发送ARP请求和接收ARP应答3. 为RARP发送RARP请求和接收RARP应答 以太网和IEEE 802 封装以太网是当今TCP/IP采用的主要的局域网技术，它采用一种称作CSMA/CD的媒体接入方法，其意思是带冲突检测的载波侦听多路接入。它的速率是10Mb/s，地址为48bit。 前导码(8B)：在帧的前面插入8B，使接收端和发送端进行时钟同步，其中7B为前同步码，1B为帧开始定界符。 前同步码均为：10101010帧开始定界符为：10101011，最后一个字节为告诉接收端“重要的帧开始了” 目的MAC(6B)：包含目的主机网卡MAC地址或广播地址 源MAC(6B)：发送端的网卡MAC地址 类型(2B)：之处接收端收到该帧时，将该帧的载荷数据交付给谁处理 0x0800:IPv4 802.1Q标签： CRC(4B)：为了让接收端对接收到的帧进行差错检验(也做帧校验序列，FCS) FCS: 该字段有 4 个字节，表示帧校验序列，用于校验帧是否出错。该字段内容已被网络设备滤去，抓包软件已无法获取。 帧间距：表示两个Frame之间间隔大小，设备发送完一个Frame后，并不会立刻发送下一个，而是等待IFG的间隔才会继续发送。 最小的帧间隙为12bytes，主要为了避免冲突(参考以太网的CSMA/CD特定) 抓包 为什么wireshark抓不到帧尾的FCS 4字节和以太网V2的前序8字节？ 因为wireshark把这2个都给过滤了。 在物理层上网卡要先去掉前导同步码和帧开始定界符，然后对帧进行CRC检验，如果帧校验和错，就丢弃此帧。如果校验和正确，就判断帧的目的硬件地址是否符合自己的接收条件（目的地址是自己的物理硬件地址、广播地址、可接收的多播硬件地址等），如果符合，就将帧交“设备驱动程序”做进一步处理。这时我们的抓包软件才能抓到数据，因此，抓包软件抓到的是去掉前导同步码、帧开始分界符、FCS之外的数据 通过OmniPeek抓包查看FCS内容： 环回概念：使用Internet协议与同一计算机上的服务器通信。为实现这个目标，大多数实现支持一种工作在网络层的环回能力，通常使用一个虚拟的环回网络接口来实现。 MTU概念MTU：最大传输单元，MTU是数据链路层的概念，MTU限制的是数据链路层的payload，即上层协议的大小，如IP，ICMP等。 （涉及到的内容分片和重组） OSI中的层 功能 TCP/IP协议族 应用层 文件传输，电子邮件，文件服务，虚拟终端 TFTP，HTTP，SNMP，FTP，SMTP，DNS，Telnet 表示层 数据格式化，代码转换，数据加密 没有协议 会话层 解除或建立与别的接点的联系 没有协议 传输层 提供端对端的接口 TCP，UDP 网络层 为数据包选择路由 IP，ICMP，RIP，OSPF，BGP，IGMP 数据链路层 传输有地址的帧以及错误检测功能 SLIP，CSLIP，PPP，ARP，RARP，MTU 物理层 以二进制数据形式在物理媒体上传输数据 ISO2110，IEEE802，IEEE802.2 作用：为什么是1500? 标准的以太网数据帧大小是：1518，头信息有14字节，尾部校验和FCS占了4字节，所以真正留给上层协议传输数据的大小就是：1518 - 14 - 4 = 1500 抓包 ping 2.2.2.2 ping 2.2.2.2 -l 1 数据大小设置为1，此时抓包可见Padding内容，使得payload达到最小要求(MTU–&gt; 46，若加上头部信息，为64) ping 2.2.2.2 -l 2000 出现了分片，分为1514及562两个报文 1514 = 6+6+2+20(IPv4头部)+1480(payload)","tags":[{"name":"TCP-IPv4","slug":"TCP-IPv4","permalink":"http://tsung1992.github.io/tags/TCP-IPv4/"},{"name":"网络基础","slug":"网络基础","permalink":"http://tsung1992.github.io/tags/网络基础/"}]},{"title":"网络连接设备","date":"2020-08-13T12:45:45.631Z","path":"network/网络连接设备/","text":"转发器/集线器仅发生在物理层，完成比特数据在物理层的传输 作用：实现物理层的连接，对衰减的信号进行放大整形或再生，起到扩展网段距离的作用。 网桥/交换机交换机作用于数据链路层和物理层 交换机是一种用于电信号转发的网络设备。它可以为接入交换机的任意两个网络节点提供独享的电信号通路。 A–D之间的数据交换没有进过网桥，这是因为两者连接在网桥的同一个端点处。 A–G之间的数据交换进过网桥，这是因为两者连接在网桥不同的端点处 路由器路由器是用来延伸、拓展网络的设备。 一个接口连接是一个网络，在局域网内部通常使用集线器或交换机扩展网络 网关网关(Gateway)又称网间连接器、协议转换器。网关在传输层上以实现网络互连，是最复杂的网络互连设备，仅用于两个高层协议不同的网络互连。 网关是一种充当转换重任的计算机系统或设备。在使用不同的通信协议、数据格式或语言,甚至体系结构完全不同的两种系统之间，网关是一个翻译器。与网桥只是简单地传达信息不同，网关对收到的信息要重新打包，以适应目的系统的需求。同时，网关也可以提供过滤和安全功能。大多数网关运行在OSI 7层协议的顶层–应用层","tags":[]},{"title":"TCP-IP详解概述","date":"2020-08-13T12:45:45.599Z","path":"network/概述/","text":"OSI参考模型 ISO标准(ISO组织制定) ​ 开放系统互连(open system interconnection)，将不同系统进行互连所构建的模型 ​ 参考模型：不是实际的协议，并不是在实际过程汇总进行实用的模型，而是作为参考、知道的模型 目的 ​ 使两个不同的系统能够通信，而不需要改变底层的硬件或软件逻辑 ​ 不同的系统：一台计算机、一部电话 OSI不是协议，是网络体系结构的概念模型 层次体系结构网络支持层：为通信提供传输的支持 应用支持层：通常由软件实现的，应用软件，为网络应用提供相应的支持 传输层：将上下两层结合在一起 对等层通信层次模型在通信过程中是如何使用的。 A 和 B 通过中间节点进行通信(网络互连设备) 两个系统之间如何实现通信，其通信方式称为对等层通信。 对等层概念可通过层次模型进行对应。 下层：服务提供者 上层：服务使用者 接口：层与层之间存在一个接口，为了实现层与层之间服务的提供与使用的通道 对等层：不同主机之间的相同层次被称为对等层(Peer)。主机A的应用层和主机B的应用层互为对等层、主机A的会话层和主机B的会话层互为对等层 对等进程/对等实体 对等层协议：对等实体之间交换数据或通信时必须遵守的规则 对等层与对等实体： # 每一层可以同时存在多个实体 存在通信关系的对等层实体才是对等实体# 每一层可以同时存在多个协议 协议是对等实体间的通信规则 数据通信-封装7层模型，最上一层直接面向用户，最下一层直接面向物理介质。真正的数据传输方向是发送方是由高层送往底层，接收方由底层依次送往高层 PDU：协议数据单元，对等实体之间通信时所传输的信息内容，每一层封装成的PDU均有自己的名字 应用层、表示层和会话层封装成的PDU被统一称为Data(数据)传输层的被称为数据段(segement)在网络层的被称为packet(IP数据包，分组)数据链路层(frame)帧物理层的被称为bit流 在OSI参考模型看来，数据通信时，是一层一层处理，逐层封装好，在物理上进行实在的传输：从源主机（SOURCE）的应用层发出来的数据是有一定格式的协议数据单元，称为PDU（protocol data unit）。应用层发给下一层表示层后，在PDU前面加上了本层控制信息，也就是图中的AH，加在头部。加了头部PH的A-PDU，更新为本层的PDU，也就是要发给第五层会话层的内容。即A-PDU+PH=P-PDU。上一层向下一层发送PDU，逐层加上本层的头部后成为下一层的PDU。直至发到数据链路层，数据链路层还加一个尾部，也就是DT，起到校验作用，如果数据正确，继续传输，数据错误直接丢掉不继续传输。数据链路层发给物理层后，物理层将PDU转换为二进制编码（比特流），通过硬件转换为信号发送出去。这样源主机七层任务完成。 图右侧是目的主机的数据接收过程：接收到硬件的二进制信号后，物理层转换为PDU发个数据链路层。数据链路层拆掉头部和尾部后，将赤裸的PDU送给网络层。网络层再拆掉头部，送入下一层，逐层拆掉头部，到了送给应用层时，前面不同层添加的头部完全被拆干净，留下原本发送的最原始PDU，也就是用户数据。 在构造协议数据单元时会在头部增加控制信息，这些控制信息包括：1) 地址：用来标识发送端和接收端，源主机得知道数据往哪发，目的主机得知道数据是发给谁的 2) 差错检测编码：用于差错检测或纠正 3）协议控制：实现协议功能的附加信息(优先级、服务质量及安全控制等) 层次功能 层次 功能 网络协议 应用层 提供应用协议，用户与网络面对面菜刀接口 HTTP、TFTP、FTP、SMTP 表示层 数据的编码、翻译、压缩、解压缩、加密、解密、将数据翻译为相对应的编码格式，然后展现到应用程序中 telnet、Rlogin、SNMP、Gopher 会话层 主要用来管理会话(建立连接、保持连接、断开连接) SMTP、DNS 传输层 提供端到端的连接方式(可靠的传输方式、不可靠的传输方式、数据包重组) TCP、UDP 网络层 负责设备的IP地址寻址，寻找网络中目的位置，并在去往目的的多条路径中选择一条最佳的路径 IP、ICMP、ARP、RARP、AKP、UUCP 数据链路层 协商、流量控制、差错控制、物理寻址 FDDI、Ethernet、Arpanet、PDN、PPP 物理层 定义了网络通信接口及介质的标准，以及将上层封装的数据转换为bit的二进制方式进行传输 IEEE802.1A，IEEE 802.2到IEEE 802.11 TCP/IP协议族 TCP/IP分层TCP/IP通常被认为是一个四层协议系统，每一层负责不同的功能。 链路层：数据链路层或网络接口层，通常包括操作系统中的设备驱动程序和计算机中对应的网络接口卡。一起处理与电缆(或其他任何传输媒介)的物理接口细节。 网络层：处理分组在网络中的活动，如分组的选路。网络层协议包括IP协议(网际协议)、ICMP协议(Internet互联网控制报文协议)，以及IGMP协议(Internet组管理协议) 运输层：主要为两台主机上的应用程序提供端到端的通信。 ​ TCP(传输控制协议)：为两台主机提供高可靠性的数据通信，它所做的工作包括把应用程序交给它的数据分成合适的小块交给下面的网络层，确定接收到的分组，设置发送最后确认分组的超时时钟等。 ​ UDP(用户数据报协议)：为应用层提供一种非常简单的服务，不可靠的数据通信。 应用层：负责处理特定的应用程序细节 telnet:远程登录FTP：文件传输协议SMTP：简单邮件传送协议SNMP：简单网络管理协议 TCP和UDP是两种最为著名的运输层协议，二者都使用IP作为网络层协议。 TCP虽然使用不可靠的IP服务，但却提供一种可靠的运输层服务 UDP为应用程序发送和接收数据报，一个数据包是指从发送方传输到接收方的一个信息单元。UDP是不可靠的，不能保证数据报能安全无误的达到最终目的 IP是网络层上的主要协议，同时被TCP和UDP使用 ICMP是IP协议的附属协议，IP层用它来与其它主机或路由器交换报错报文和其它重要信息。 IGMP是Internet组管理协议，它用来把一个UDP数据报多播到多个主机。 ARP(地址解析协议)和RARP(逆地址解析协议)是某些网络接口使用的特殊协议，用来转换IP层和网络接口层使用的地址。 封装当应用程序用TCP传送数据时，数据被送入协议栈中，然后逐个通过每一层知道被当做一串比特流送入网络。 TCP传给IP的数据单元称作TCP报文段或简称为TCP端 IP传给网络接口层的数据单元称作IP数据报 通过以太网传输的比特流称作帧 以太网数据帧的物理特性是其长度必须在46~1500字节之间 编址物理地址 用来标识通信的节点(物理网内部) 节点由所属的LAN或WAN指定 在局域网或广域网内是唯一的 也称为链路地址/硬件地址 并不是用于物理层，而是用于数据链路层(物理层主要完成比特流的传送，仅涉及到信号转换，不涉及寻址) IP地址 标识通信节点的网络连接(逻辑网络内) 该地址有Internet指定，在Internet内唯一 32bit，点分十进制进行标识 端口地址 标识于通信进程 由操作系统来指定，在一台计算机内是唯一的 作用于传输层，用于标识应用层的信息 TCP/IP中的地址与层次 抓包 更新图标","tags":[]},{"title":"地址解析协议","date":"2020-08-13T12:45:45.599Z","path":"network/地址解析协议/","text":"地址解析协议(ARP)提供了一种IPv4地址和各种网络技术使用的硬件地址之间的映射。 ARP仅用于IPv4、IPv6使用邻居发现协议，被合并入ICMPv6 直接交付ARP运行要求：仅适用于广播网络，链路层能将一个消息交付到它连接的所有网络设备。 在一个共享的链路层网段上，ARP向所有主机发送一个称为ARP请求的以太网帧。 以太网主机在同一广播域中，ARP查询使用链路层广播帧发送，并被所有主机接收。 IP地址匹配的主机直接向请求主机返回响应。IP地址不匹配的主机主动丢弃ARP查询 ARP缓存表ARP高效运行的关键是维护每个主机结合路由器上的ARP缓存表。 该缓存使用地址解析为每个接口维护从网络层地址到硬件地址的最新应用。 当IPv4地址映射到硬件地址时，它对应于高速缓存中的一个条目，其正常到期时间是条目创建开始后的20分钟。 查看ARP缓存表： arp -a接口: 192.168.31.33 --- 0xe Internet 地址 物理地址 类型 192.168.31.1 28-6c-07-0a-11-3a 动态 192.168.31.157 88-bf-e4-99-fa-b0 动态 192.168.31.255 ff-ff-ff-ff-ff-ff 静态 224.0.0.2 01-00-5e-00-00-02 静态 224.0.0.22 01-00-5e-00-00-16 静态 动态ARP动态ARP指的是通过报文去学习ARP表项，不需要管理员手工建立和维护，动态条目随时间推移自动添加和删除 每个动态ARP缓存条目默认的生命周期是两分钟。当超过两分钟，该条目会被删掉。所以，生命周期也被称为超时值。 延长规则：当ARP条目已存在，使用该条目后，将会重设超时值为两分钟。 静态ARP静态ARP指的是需要管理员手工指定建立AP-MAC映射表，需要管理员手工建立和维护。 ARP帧格式 硬件类型：表示硬件地址的类型，值为1表示以太网地址 协议类型：表示要映射的协议地址类型，值为0x0800表示IP地址类型 硬件地址长度和协议地址长度：分别指出硬件地址和协议的长度，以字节为单位。对于以太网上 IP 地址的ARP请求或应答来说，它们的值分别为 6 和 4 操作类型(op)：1表示ARP请求，2表示ARP应答，RARP 请求为 3，RARP 响应为 4 免费ARP免费ARP：发生在一台主机发送ARP请求以寻找自己的地址 应用： 用于检测IP地址冲突，当一台主机发送了免费ARP请求报文后，如果收到了ARP响应报文，则说明网络内衣存在使用该IP的主机 利用免费ARP确认设备接口IP地址 使用免费ARP报文，更新某些设备的ARP表现 利用免费ARP的攻击","tags":[]},{"title":"tcpdump基础用法说明","date":"2020-08-13T12:45:45.584Z","path":"Linux/tcpdump基础用法说明/","text":"1. 简介 tcpdump是一个用于截取网络分组，并输出分组内容的工具。根据使用者的定义对网络上的数据包进行截获。 tcpdump针对网络网络层、协议、主机、网络或端口的过滤，并提供and、or、not等逻辑语句辅助去掉无用的信息。 其官网地址为：tcpdump官网，在官网中存在完整的英文说明文档 2. 常用tcpdump语法 抓包选项-A 以ASCII格式打印出所有分组，并将链路层的头最小化-c 仅抓取指定数量的分组-i 指定监听的网络接口-n 对地址以数字方式显示，否则显示为主机名-nn 除了-n的作用外，还把端口显示为数值，否则显示端口服务器-P 指定要抓取的包是流入还是流出的包。可以给定的值为\"in\"、\"out\"、\"inout\"-XX 输出包的头部数据，会以16进制和ASCII两种方式同时输出，更详细-v 当分析和打印的时候，产生详细的输出-w 将抓包数据输出到文件中-r 从给定的数据包文件中读取数据 2.1 tcpdump表达式表达式用于筛选输出哪些类型的数据包，如果没有给定表达式，所有的数据包都将输出，否则输出表达式为true的包。在表达式中出现的shell元字符建议使用单引号包围。 一个基本的表达式单元格式为：tcpdump [options] [not] proto dir type 1. proto:通过给定协议限定匹配的数据包类型 常用的协议有：tcp/udp/arp/ip/ether/icmp等2. dir：指定ID的方向 可以给定的值包括src/dst/src or dst/src and dst3. type：指定ID的类型 可以给定的值有host/net/port/portrange 2.2 tcpdump示例 监视指定网络接口的数据包 # tcpdump -i eth1 监视指定主机的数据包 # tcpdump host 1.1.1.1# tcpdump -i eth1 src host 1.1.1.1# tcpdump -i eth1 dst host 1.1.1.1 抓取主机为1.1.1.1的网络数据指定源地址，1.1.1.1指定目的地址，1.1.1.1 监视指定端口 # tcpdump -i eth1 port 25# tcpdump -i eth1 src port 25# tcpdump -i eth1 dst port 25 网络过滤 # tcpdump -i eth1 net 1.1# tcpdump -i eth1 src net 1.1# tcpdump -i eth1 dst net 1.1 监视指定协议 # tcpdump -i eth1 arp# tcpdump -i eth1 ip# tcpdump -i eth1 tcp# tcpdump -i eth1 udp# tcpdump -i eth1 icmp 示例语句 抓取经过eth1接口，目的地址为1.1.1.1或1.1.1.2端口是80的tcp数据# tcpdump -i eth1 '((tcp) and (port 80) and ((dst host 1.1.1.1) or (dst host 1.1.1.2)))'","tags":[]},{"title":"Linux下IP及DNS配置","date":"2020-08-13T12:45:45.568Z","path":"Linux/Linux下IP及DNS配置/","text":"linux下配置IP1. 相关文件# cd /etc/network/# vi interfaces(以下为文件内容)# This file describes the network interfaces available on your system# and how to activate them. For more information, see interfaces(5).source /etc/network/interfaces.d/*# The loopback network interfaceauto loiface lo inet loopbackauto eth0iface eth0 inet staticaddress 1.1.15.15netmask 255.255.255.0network 0.0.0.0gateway 1.1.15.1 也可用相关命令：ifconfig eth0 x.x.x.x netmask x.x.x.x如：ifconfig eth0 1.1.1.1 netmask 255.255.0.0 2. 配置虚拟IP地址相关命令：ifconfig eth1:0 x.x.x.x netmask 255.255.0.0如：ifconfig eth0:0 2.1.1.1 netmask 255.255.0.0 子网卡并不是实际上的网络接口设备，但可以作为网络接口在设备中出现。其必须依赖于物理网卡 3. 配置DNS相关文件# vi /etc/resolv.conf(以下为文件内容)# Generated by NetworkManager# search localdomain# nameserver 192.168.23.2nameserver 114.114.114.114nameserver 8.8.8.8 修改相应的nameserver内容即可。 若不通，则可继续修改如下文件：# vi /etc/nsswitch.conf(以下为相关内容)# /etc/nsswitch.conf## Example configuration of GNU Name Service Switch functionality.# If you have the `glibc-doc-reference' and `info' packages installed, try:# `info libc \"Name Service Switch\"' for information about this file.passwd: compatgroup: compatshadow: compatgshadow: files# hosts: files mdns4_minimal [NOTFOUND=return] dns myhostnamehosts: files dns winsnetworks: filesprotocols: db filesservices: db filesethers: db filesrpc: db filesnetgroup: nis 修改相应的hosts部分，添加dns wins即可","tags":[]},{"title":"Internet控制报文协议","date":"2020-08-13T12:45:45.568Z","path":"network/Internet控制报文协议/","text":"概述问题： IP协议本身并没有为终端系统提供直接的方法来发现那些发往目的地址失败的IP数据包。 IP没有提供直接的方式来获取诊断信息 解决： ICMP：Internet控制报文协议： 与IP结合使用，以便提供与IP协议层配置和IP数据包处置相关的诊断和控制信息 ICMP不为IP网络提供可靠性，表明了某些类别的故障和配置信息 ICMP在IPv4和IPv6中的封装IPv4： IPv6： ICMP报文格式 以8位的类型和代码字段开始 其后的16位校验和字段涵盖了整个报文 ICMPv4中为类型字段保留了42个不同的值，用于确定特定的报文 ICMPv6中，将涵盖一个来自IPv6头部的伪头部(pseudo-header) ICMP报文分类： 差错报文：有关IP数据报传递的ICMP报文 查询或信息类报文：有关信息采集和配置的ICMP报文 ICMPv4报文 类型 正式名称 参考 E/I 用途/注释 0(*) 回显应答 RFC0792 I 回显(ping)应答，返回数据 3(*)(+) 目的不可达 RFC0792 E 不可达的主机/协议 4 源端抑制 RFC0792 E 表示拥塞(弃用) 5(*) 重定向 RFC0792 E 表示应该被使用的可选路由 8(*) 回显 RFC0792 I 回显(ping)请求（数据可选） 9 路由器通告 RFC1256 I 请求路由器通告 10 路由器请求 RFC1256 I 请求路由器通告 11(*)(+) 超时 RFC0792 E 资源耗尽(例如IPv4 TTL) 12(*)(+) 参数问题 RFC0792 E 有问题的数据包或头部 ICMPv6报文ICMPv6负责的不仅是差错和信息类报文，也负责大量IPv6路由器和主机的配置。 ICMPv6中，差错报文的报文类型从0-127，信息类报文的报文类型从128-255。 处理ICMP报文一般情况下： 传入的信息类请求将被操作系统自动处理 差错类报文传递给用户进程或传输层协议","tags":[]},{"title":"Internet地址结构","date":"2020-08-13T12:45:45.553Z","path":"network/Internet地址结构/","text":"概述IP地址–通用标识符 唯一标识互联网上的主机或路由器(唯一、通用、网络连接) 主机标识符 name：是什么，可读性强 address：在哪里，软件效率高 route：如何达到 IP地址表示IPv4地址 长度为32 bit 采用所谓的点分四组或点分十进制表示法 每个数字是一个非负整数，范围为[0-255]，代表整个IP地址的四分之一 IPv6地址 长度为128 bit IPv6地址的传统表示方法为采用称为块或字段的4个十六进制数，这些称为块或字段的数由==冒号==分隔 IPv6地址简化表示： 一个块中前导的零必须压缩 全零的块可以省略，并用符号::代替(::只能用于影响最大的地方，压缩最多的零)，一个IPv6地址中只能使用一次::符号 在IPv6格式中嵌入IPv4地址可使用混合符号形式，紧接着IPv4部分的地址块的值为ffff，地址的其余部分使用点分四组格式(IPv4映射的IPv6地址)【::ffff:10.0.0.1 –&gt; 10.0.0.1】 IPv6地址的低32位通常采用点分四组表示法（IPv4兼容的IPv6）【::0102:f001 –&gt; 1.2.240.1】 a到f的16进制数字应该用小写表示 IP地址结构分类寻址IP地址组成：网络部分和主机部分 网络部分：用于识别接口使用的IP地址在哪个网络中发现 主机地址：用于识别由网络部分给出的网络中的特定主机 地址中的一些连续位称为网络号，其余称为主机号。 用于表示通信节点的IP地址为A、B、C三类，用于为Internet(单播地址)中的接口分配地址 D：供组播使用 E：保留地址 特殊网络地址 特殊地址 Net id Host ID 源/目的地址 网络地址 特定的 全0 都不是 直接广播地址 特定的 全1 目的地址 受限广播地址 全1 全1 目的地址 本网络上的本主机 全0 全0 源地址(0.0.0.0) 本网络上的特定主机 全0 特定的 目的地址 环回地址 127 任意 目的主机 网络地址：仅用于标识网络，而不标识网络内的任意节点，标识的是一个网络集合 直接广播地址：标识对特定网络的广播 受限广播地址(本地广播地址)：标识对本地网络的广播 本网络上的特定主机：仅可作为源地址，获取自己的IP地址而临时使用的IP地址 子网掩码子网掩码是由一台主机或路由器使用的分配位，以确定如何从一台主机对应IP地址中获取网络和子网信息。 掩码由路由器和主机使用，以==确定一个IP地址的网络/子网部分的结束和主机部分的开始。== 表示网络或子网的大小 32 bits 二进制数 1表示一个IP地址的对应位与一个地址的网络/子网部分的对应位集合 0表示一个IP地址的对应位作为主机ID的一部分 可变长度子网掩码VSLM(可变长度子网掩码)：用于分割一个网络号，使每个子网支持不同数量的主机。提高子网结构的灵活性 如何确定可变子网长度？确定可变子网掩码长度的过程其实就是划分子网的过程。 当从主机位中借1位二进制位时，当前网络可划分出2个子网，每个子网主机数是原来的1/2-2；当从主机位中借2位二进制位时，当前网络可划分出4个子网，每个子网主机数是原来的1/4-2……当从主机位中借N位二进制位时，当前网络可划分为2N个子网，每个子网主机数是原来的2-N-2 192.168.10.0/24这个C类网络要划分出2个相等主机数的子网，则 网络号与子网掩码转为二进制 网络号 192.168.10.0 转为二进制 11000000 10101000 00001010 00000000子网掩码 255.255.255.0 转为二进制 11111111 11111111 11111111 00000000 要把一个网络划分成两个相等子网，子网掩码要加1位，变成11111111 11111111 11111111 10000000 网络号从主机位借一位用于子网11000000 10101000 00001010 XYYYYYYY X位代表借入的，用于表示子网号，7个Y代表剩余主机位，X有两个值0和1。 1）为0时： ​ 11000000 10101000 00001010 0YYYYYYY ​ 当Y全为0，表示划分出的这个子网的网络号，为11000000 10101000 00001010 00000000 ​ 其主机可用IP地址范围是： ​ 11000000 10101000 00001010 0 0000001（192.168.10.1，掩码：255.255.255.128） ​ 至 ​ 11000000 10101000 00001010 0 1111110（192.168.10.126，掩码：255.255.255.128） 2）为1时 ​ 11000000 10101000 00001010 1YYYYYYY ​ 当Y全为0，表示划分出的这个子网的网络号，为11000000 10101000 00001010 10000000 ​ 其主机可用IP地址范围是： ​ 11000000 10101000 00001010 1 0000001（192.168.10.129，掩码：255.255.255.128） ​ 至 ​ 11000000 10101000 00001010 1 1111110（192.168.10.254，掩码：255.255.255.128） 综述，192.168.10.0/24要划分成两个相等主机数的子网，子网掩码要改为25位，划分出的两个子网情况是： 子网1： 网络号：192.168.10.0 子网掩码：255.255.255.128 广播地址：192.168.10.127 主机IP地址范围：192.168.10.1至192.168.10.126 子网2： 网络号：192.168.10.128 子网掩码：255.255.255.128 广播地址：192.168.10.255 主机IP地址范围：192.168.10.129至192.168.10.254 广播地址 定向广播地址 1. 通过子网掩码取反与IP地址按位或运算得到2. 可作为一个单独的数据报通过Internet路由直至到达目标子网，再作为一组数据报发送给子网中所有主机* 由于安全问题，其在Internet中被禁用 本地网络广播(有限广播) 1. 特殊地址：255.255.255.2552. 不会被路由器转发,链路层的广播机制用于支持它们3. 广播地址可用于IPv4中，而IPv6仅使用组播地址 IPv6地址和接口标识符IPv6特点： 一个IPv6地址范围指其可用的网络规模 节点本地(只用于同一计算机通信) 链路本地(只用于同一网络链路或IPv6前缀中的结点) 全球性(Internet范围) IPv6中，大部分节点通常在同一网络接口上使用多个地址 一个IPv6节点需要一组地址，包括组播地址 链路本地IPv6地址使用接口标识符(IID)作为一个单播IPv6地址的分配基础。 IID的长度通常为64位，并直接由一个网络接口相关的链路层MAC地址形成，该地址使用修改的EUI-64格式或由其他进程随机提供的值形成，以提供可防范地址跟踪的某种程度的隐私保护。 EUI表示扩展唯一标识符 EUI-64标识符由一个24位的组织唯一标识符(OUI)+组织分配的40位可扩展标识符组成，并由前24位识别。 OUI由IEEE注册权威机构维护并分配。长度为24位，并占据EUI-48和EUI-64地址的前3个字节。该地址的第一个字节的低两位分别为u位和g位。当u位被设置时，表示该地址是本地管理，当g位被设置时，表示该地址是一组或组播类型的地址。 EUI-64计算方法： 由EUI-48地址形成 将EUI-48地址的24位OUI复制到EUI-64地址 EUI-64地址的4，5字节的16位替换为FFFE 复制由组织分配的剩余位 修改的EUI-64用于形成IPv6地址的IID，但需要对u位取反。 链路本地IPv6地址计算方法： 查看接口MAC地址： eth0 Link encap:Ethernet HWaddr 00:50:56:9d:a3:b4 inet addr:10.160.14.61 Bcast:10.160.14.255 Mask:255.255.255.0 inet6 addr: fe80::250:56ff:fe9d:a3b4/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:147710806 errors:2 dropped:3659 overruns:0 frame:0 TX packets:158983119 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:9252586604 (9.2 GB) TX bytes:35110783086 (35.1 GB) 变换为EUI-64，MAC地址前三节不变，第4，5节插入fffe(固定的)，并复制剩余位 00:50:56:ff:fe:9d:a3:b4 u位取反（第一节内容：0000 0000，后两位分别为0） 0000 0000:50:56:ff:fe:9d:a3:b4u位取反：0000 0010:50:56:ff:fe:9d:a3:b4 形成的IID为：02:50:56:ff:fe:9d:a3:b4 使用保留的链路本地前缀fe80:/10，形成完整地址，/64为标准长度，用于一个IPv6地址中识别子网/主机部分： fe80:250:56ff:fe9d:a3b4 CIDR和聚合前缀无类别域间路由(CIDR) 单播/多播/广播地址单播(Unicast) 通信：一对一，源或目的地址 因特网上的所有系统必须至少有一个唯一的单播地址 可以为A、B或C类 多播(Multicast) 通信：一对多，目的地址 因特网上的系统可以由一个或多个多播地址 只能是D类，本地级(本IP网络内的一组通信节点)或全局级 广播(Broadcast) 通信：一对所有，目的地址 受限广播或直接广播，本地级 类 地址范围 高序位 用途 百分比 网络数 主机数 A 0.0.0.0-127.255.255.255 0 单播/特殊 1/2 128（126） 1677216 B 128.0.0.0-191.255.255.255 10 单播/特殊 1/4 16384 65536 C 192.0.0.0-223.255.255.255 110 单播/特殊 1/8 2097152 256 D 224.0.0.0-239.255.255.255 1110 组播 1/16 N/A N/A E 240.0.0.0-255.255.255.255 1111 保留 1/16 N/A N/A 专用网 不需接入Internet，但需要用TCP/IP通信 编址方案 ​ 申请，并使用A、B、C类地址(全局唯一) ​ 不申请，直接使用A、B、C类地址(本组织唯一，全局不唯一) ​ 不申请，直接使用专用地址(本组织唯一，全局不唯一) 专用地址(私有地址) 类 私有地址 总数 A 10.0.0.0-10.255.255.255 1 x A B 172.16.0.0-172.31.255.255 16 x B C 192.168.0.0-192.168.255.255 256 x C 术语网络号：IP地址的一个组成部分 网络地址：一个IP地址","tags":[]}]