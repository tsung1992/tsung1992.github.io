[{"title":"","date":"2020-08-03T13:41:54.900Z","path":"2020/08/03/物理层&链路层/","text":"物理层物理层的功能不需要地址 Frame 13： 74 bytes on wire (592 bits),74 bytes captured (592 bits) 13号帧，线路74字节，实际捕获74字节 123456789Encapsulation type： Ethernet(1) # 封装类型Arrival Time: # 捕获日期和时间Epoch Time：# 时间戳，另一种时间表示方式[Time delta from previous captured frame: ] #此包与前一包的时间间隔[Time since reference or first frame: ] #此包与第一帧的时间间隔Frame Number: # 帧序号Frame Length: # 帧长度Capture Length： # 捕获长度 （通常情况下帧长度和捕获长度是相同的）Protocols in frame：帧内封装的协议层次结构 EtherType 是以太帧里的一个字段，用来指明应用于帧数据字段的协议 链路层主要目的： 1231. 为IP模块发送和接收IP数据报2. 为ARP模块发送ARP请求和接收ARP应答3. 为RARP发送RARP请求和接收RARP应答 以太网和IEEE 802 封装以太网是当今TCP/IP采用的主要的局域网技术，它采用一种称作CSMA/CD的媒体接入方法，其意思是带冲突检测的载波侦听多路接入。它的速率是10Mb/s，地址为48bit。 前导码(8B)：在帧的前面插入8B，使接收端和发送端进行时钟同步，其中7B为前同步码，1B为帧开始定界符。 12前同步码均为：10101010帧开始定界符为：10101011，最后一个字节为告诉接收端“重要的帧开始了” 目的MAC(6B)：包含目的主机网卡MAC地址或广播地址 源MAC(6B)：发送端的网卡MAC地址 类型(2B)：之处接收端收到该帧时，将该帧的载荷数据交付给谁处理 10x0800:IPv4 802.1Q标签： CRC(4B)：为了让接收端对接收到的帧进行差错检验(也做帧校验序列，FCS) FCS: 该字段有 4 个字节，表示帧校验序列，用于校验帧是否出错。该字段内容已被网络设备滤去，抓包软件已无法获取。 帧间距：表示两个Frame之间间隔大小，设备发送完一个Frame后，并不会立刻发送下一个，而是等待IFG的间隔才会继续发送。 最小的帧间隙为12bytes，主要为了避免冲突(参考以太网的CSMA/CD特定) 抓包 为什么wireshark抓不到帧尾的FCS 4字节和以太网V2的前序8字节？ 因为wireshark把这2个都给过滤了。 在物理层上网卡要先去掉前导同步码和帧开始定界符，然后对帧进行CRC检验，如果帧校验和错，就丢弃此帧。如果校验和正确，就判断帧的目的硬件地址是否符合自己的接收条件（目的地址是自己的物理硬件地址、广播地址、可接收的多播硬件地址等），如果符合，就将帧交“设备驱动程序”做进一步处理。这时我们的抓包软件才能抓到数据，因此，抓包软件抓到的是去掉前导同步码、帧开始分界符、FCS之外的数据 通过OmniPeek抓包查看FCS内容： 环回概念：使用Internet协议与同一计算机上的服务器通信。为实现这个目标，大多数实现支持一种工作在网络层的环回能力，通常使用一个虚拟的环回网络接口来实现。 MTU概念MTU：最大传输单元，MTU是数据链路层的概念，MTU限制的是数据链路层的payload，即上层协议的大小，如IP，ICMP等。 （涉及到的内容分片和重组） OSI中的层 功能 TCP/IP协议族 应用层 文件传输，电子邮件，文件服务，虚拟终端 TFTP，HTTP，SNMP，FTP，SMTP，DNS，Telnet 表示层 数据格式化，代码转换，数据加密 没有协议 会话层 解除或建立与别的接点的联系 没有协议 传输层 提供端对端的接口 TCP，UDP 网络层 为数据包选择路由 IP，ICMP，RIP，OSPF，BGP，IGMP 数据链路层 传输有地址的帧以及错误检测功能 SLIP，CSLIP，PPP，ARP，RARP，MTU 物理层 以二进制数据形式在物理媒体上传输数据 ISO2110，IEEE802，IEEE802.2 作用：为什么是1500? 标准的以太网数据帧大小是：1518，头信息有14字节，尾部校验和FCS占了4字节，所以真正留给上层协议传输数据的大小就是：1518 - 14 - 4 = 1500 抓包 ping 2.2.2.2 ping 2.2.2.2 -l 1 数据大小设置为1，此时抓包可见Padding内容，使得payload达到最小要求(MTU–&gt; 46，若加上头部信息，为64) ping 2.2.2.2 -l 2000 出现了分片，分为1514及562两个报文 1514 = 6+6+2+20(IPv4头部)+1480(payload)","tags":[]},{"title":"tcpdump基础用法说明","date":"2018-11-19T13:50:55.391Z","path":"2018/11/19/tcpdump基础用法说明/","text":"1. 简介 tcpdump是一个用于截取网络分组，并输出分组内容的工具。根据使用者的定义对网络上的数据包进行截获。 tcpdump针对网络网络层、协议、主机、网络或端口的过滤，并提供and、or、not等逻辑语句辅助去掉无用的信息。 其官网地址为：tcpdump官网，在官网中存在完整的英文说明文档 2. 常用tcpdump语法 抓包选项12345678910-A 以ASCII格式打印出所有分组，并将链路层的头最小化-c 仅抓取指定数量的分组-i 指定监听的网络接口-n 对地址以数字方式显示，否则显示为主机名-nn 除了-n的作用外，还把端口显示为数值，否则显示端口服务器-P 指定要抓取的包是流入还是流出的包。可以给定的值为\"in\"、\"out\"、\"inout\"-XX 输出包的头部数据，会以16进制和ASCII两种方式同时输出，更详细-v 当分析和打印的时候，产生详细的输出-w 将抓包数据输出到文件中-r 从给定的数据包文件中读取数据 2.1 tcpdump表达式表达式用于筛选输出哪些类型的数据包，如果没有给定表达式，所有的数据包都将输出，否则输出表达式为true的包。在表达式中出现的shell元字符建议使用单引号包围。 一个基本的表达式单元格式为：tcpdump [options] [not] proto dir type 1234561. proto:通过给定协议限定匹配的数据包类型 常用的协议有：tcp/udp/arp/ip/ether/icmp等2. dir：指定ID的方向 可以给定的值包括src/dst/src or dst/src and dst3. type：指定ID的类型 可以给定的值有host/net/port/portrange 2.2 tcpdump示例 监视指定网络接口的数据包 1# tcpdump -i eth1 监视指定主机的数据包 123# tcpdump host 1.1.1.1# tcpdump -i eth1 src host 1.1.1.1# tcpdump -i eth1 dst host 1.1.1.1 抓取主机为1.1.1.1的网络数据指定源地址，1.1.1.1指定目的地址，1.1.1.1 监视指定端口 123# tcpdump -i eth1 port 25# tcpdump -i eth1 src port 25# tcpdump -i eth1 dst port 25 网络过滤 123# tcpdump -i eth1 net 1.1# tcpdump -i eth1 src net 1.1# tcpdump -i eth1 dst net 1.1 监视指定协议 12345# tcpdump -i eth1 arp# tcpdump -i eth1 ip# tcpdump -i eth1 tcp# tcpdump -i eth1 udp# tcpdump -i eth1 icmp 示例语句 12抓取经过eth1接口，目的地址为1.1.1.1或1.1.1.2端口是80的tcp数据# tcpdump -i eth1 '((tcp) and (port 80) and ((dst host 1.1.1.1) or (dst host 1.1.1.2)))'","tags":[]},{"title":"Linux下IP及DNS配置","date":"2018-11-18T12:03:51.923Z","path":"2018/11/18/Linux下IP及DNS配置/","text":"linux下配置IP1. 相关文件123456789101112131415161718# cd /etc/network/# vi interfaces(以下为文件内容)# This file describes the network interfaces available on your system# and how to activate them. For more information, see interfaces(5).source /etc/network/interfaces.d/*# The loopback network interfaceauto loiface lo inet loopbackauto eth0iface eth0 inet staticaddress 1.1.15.15netmask 255.255.255.0network 0.0.0.0gateway 1.1.15.1 也可用相关命令：12ifconfig eth0 x.x.x.x netmask x.x.x.x如：ifconfig eth0 1.1.1.1 netmask 255.255.0.0 2. 配置虚拟IP地址相关命令：12ifconfig eth1:0 x.x.x.x netmask 255.255.0.0如：ifconfig eth0:0 2.1.1.1 netmask 255.255.0.0 子网卡并不是实际上的网络接口设备，但可以作为网络接口在设备中出现。其必须依赖于物理网卡 3. 配置DNS相关文件1234567# vi /etc/resolv.conf(以下为文件内容)# Generated by NetworkManager# search localdomain# nameserver 192.168.23.2nameserver 114.114.114.114nameserver 8.8.8.8 修改相应的nameserver内容即可。 若不通，则可继续修改如下文件：1234567891011121314151617181920212223# vi /etc/nsswitch.conf(以下为相关内容)# /etc/nsswitch.conf## Example configuration of GNU Name Service Switch functionality.# If you have the `glibc-doc-reference' and `info' packages installed, try:# `info libc \"Name Service Switch\"' for information about this file.passwd: compatgroup: compatshadow: compatgshadow: files# hosts: files mdns4_minimal [NOTFOUND=return] dns myhostnamehosts: files dns winsnetworks: filesprotocols: db filesservices: db filesethers: db filesrpc: db filesnetgroup: nis 修改相应的hosts部分，添加dns wins即可","tags":[]},{"title":"Hello World","date":"2018-11-15T16:45:41.012Z","path":"2018/11/16/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]